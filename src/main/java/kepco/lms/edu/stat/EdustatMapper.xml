<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kepco.lms.edu.stat.EdustatMapper">

	<sql id="selectWhere">
		<where>
			a.delete_yn = 'n'
			<if test="!@kepco.util.StrUtil@isBlank(detailIdx)">
				AND a.detail_idx = #{detailIdx}
			</if>
			<if test="!@kepco.util.StrUtil@isBlank(statIdx)">
				AND a.stat_idx = #{statIdx}
			</if>
			<choose>
				<when test="!@kepco.util.StrUtil@isBlank(scStartDate) and !@kepco.util.StrUtil@isBlank(scEndDate)">
					<![CDATA[
					AND insert_date BETWEEN #{scStartDate} AND #{scEndDate}
					]]>
				</when>
				<when test="!@kepco.util.StrUtil@isBlank(scStartDate)">
					<![CDATA[
					AND insert_date >= #{scStartDate}
					]]>
				</when>
				<when test="!@kepco.util.StrUtil@isBlank(scEndDate)">
					<![CDATA[
					AND insert_date <= #{scEndDate}
					]]>
				</when>
				<otherwise>
				
				</otherwise>			
			</choose>
		</where>
	</sql>
	
	<sql id="seachWhere">
		<where>
			1=1
			<if test="!@kepco.util.StrUtil@isBlank(detailIdx)">
				AND a.detail_idx = #{detailIdx}
			</if>
			<if test="!@kepco.util.StrUtil@isBlank(statIdx)">
				AND a.stat_idx = #{statIdx}
			</if>
		</where>
	</sql>
	
	<select id="selectList" parameterType="map" resultType="egovmap">
		SELECT
			*
		FROM lms_edu_play

	</select>
	
	<select id="select" parameterType="map" resultType="egovmap">
		SELECT
			a.play_cnt AS playCnt,
		    a.most_role AS mostRole,
		    b.most_risk AS mostRisk,
		    c.most_location AS mostLocation,
		    d.most_cause AS mostCause,
		    e.most_behavior AS mostBehavior
		FROM
		    (
		        SELECT
		            work_role AS most_role,
		            (SELECT COUNT(distinct p.play_idx) FROM lms_edu_play p WHERE p.member_idx = #{memberIdx}) AS play_cnt
		        FROM
		            lms_edu_play a
				WHERE a.member_idx = #{memberIdx}
		        GROUP BY
		            work_role
		        ORDER BY
		            COUNT(*) DESC
		        LIMIT 1
		    ) AS a
		LEFT JOIN
		    (
		        SELECT
		            b.risk_factor AS most_risk
		        FROM
		            lms_edu_play a
		        LEFT JOIN
		            lms_edu_event b ON a.play_idx = b.play_idx
				WHERE a.member_idx = #{memberIdx}
				AND IFNULL(b.risk_factor, '') != ''
		        GROUP BY
		            b.risk_factor
		        ORDER BY
		            COUNT(*) DESC
		        LIMIT 1
		    ) AS b ON 1=1
	    LEFT JOIN
	    (
	        SELECT
	            c.event_location AS most_location
	        FROM
	            lms_edu_play a
	        LEFT JOIN
	            lms_edu_event b ON a.play_idx = b.play_idx
            LEFT JOIN
	            lms_edu_accident c ON b.event_id = c.event_id
			WHERE a.member_idx = #{memberIdx}
			AND IFNULL(b.event_id, '') != ''
			AND IFNULL(c.event_location, '') != ''
	        GROUP BY
	            c.event_location
	        ORDER BY
	            COUNT(*) DESC
	        LIMIT 1
	    ) AS c ON 1=1
	    LEFT JOIN
	    (
	        SELECT
	            d.accident_cause AS most_cause
	        FROM
	            lms_edu_play a
	        LEFT JOIN
	            lms_edu_event b ON a.play_idx = b.play_idx
            LEFT JOIN
	            lms_edu_accident c ON b.event_id = c.event_id
	        LEFT JOIN
	            lms_edu_accident_content d ON c.accident_code = d.accident_code
			WHERE a.member_idx = #{memberIdx}
			AND IFNULL(b.event_id, '') != ''
			AND IFNULL(d.accident_cause, '') != ''
	        GROUP BY
	            d.accident_cause
	        ORDER BY
	            COUNT(*) DESC
	        LIMIT 1
	    ) AS d ON 1=1
	    LEFT JOIN
	    (
	        SELECT
	            d.accident_behavior AS most_behavior
	        FROM
	            lms_edu_play a
	        LEFT JOIN
	            lms_edu_event b ON a.play_idx = b.play_idx
            LEFT JOIN
	            lms_edu_accident c ON b.event_id = c.event_id
	        LEFT JOIN
	            lms_edu_accident_content d ON c.accident_code = d.accident_code
			WHERE a.member_idx = #{memberIdx}
			AND IFNULL(b.event_id, '') != ''
			AND IFNULL(d.accident_behavior, '') != ''
	        GROUP BY
	            d.accident_behavior
	        ORDER BY
	            COUNT(*) DESC
	        LIMIT 1
	    ) AS e ON 1=1
	    
	</select>

	<select id="dashBoardStat" parameterType="map" resultType="map">
		SELECT 
			count(case when c.regist_state = 1 then 1 end) regist_1_cnt
			,count(case when c.regist_state = 2 then 1 end) regist_2_cnt
			,count(case when c.regist_state = 3 then 1 end) regist_3_cnt
			,sum(case when c.regist_state > 0 then 1 end) regist_sum
			,count(case when c.edu_state = 1 then 1 end) edu_1_cnt
			,count(case when c.edu_state = 2 then 1 end) edu_2_cnt
			,sum(case when c.regist_state > 0 then 1 end) regist_sum
		    ,count(DISTINCT detail_cnt) detail_cnt
		FROM
			lms_edu a
		LEFT JOIN 
			(SELECT *, (detail_idx) detail_cnt FROM lms_edu_detail) b
		ON a.edu_idx = b.edu_idx
		LEFT JOIN 
		 	lms_edu_regist c
		ON b.detail_idx = c.detail_idx
		WHERE 
			a.member_idx = #{memberIdx}
			AND a.edu_state = 2
			AND b.detail_state = 2
			AND c.member_idx != 0
			AND a.delete_yn = 'n'
			AND b.delete_yn = 'n'
			AND c.delete_yn = 'n'
	</select>
	
	<select id="dashBoardProcessList" parameterType="map" resultType="egovMap">
		SELECT
			a.*,
			(SELECT edu_title FROM lms_edu b WHERE b.delete_yn = 'n' AND  a.edu_idx = b.edu_idx) edu_title,
            (SELECT edu_keyword FROM lms_edu b WHERE b.delete_yn = 'n' AND a.edu_idx = b.edu_idx) edu_keyword,
            (SELECT COUNT(1) FROM lms_edu_regist b WHERE b.delete_yn = 'n' AND a.detail_idx = b.detail_idx AND b.regist_state = '2' AND b.member_idx != '0') edu_reg_cnt,
            (SELECT COUNT(1) FROM lms_edu_regist b WHERE b.delete_yn = 'n' AND a.detail_idx = b.detail_idx AND b.edu_state = '2' AND b.member_idx != '0') edu_train_cnt,
            (CURRENT_TIMESTAMP BETWEEN a.edu_accept_bgn_date AND a.edu_train_end_date) edu_open_state
		FROM lms_edu_detail a
		WHERE
			delete_yn = 'n'
			AND (insert_idx = #{memberIdx} OR edu_idx in (SELECT edu_idx FROM lms_edu b WHERE b.delete_yn = 'n' AND b.member_idx = #{memberIdx}))
		ORDER BY
		<choose>
			<otherwise>
				edu_train_end_date DESC
			</otherwise>
		</choose>
	</select>
	
	<select id="dashBoardFamousList" parameterType="map" resultType="egovMap">
		SELECT
			a.*,
			(SELECT edu_title FROM lms_edu b WHERE b.delete_yn = 'n' AND  a.edu_idx = b.edu_idx) edu_title,
			(SELECT edu_keyword FROM lms_edu b WHERE b.delete_yn = 'n' AND a.edu_idx = b.edu_idx) edu_keyword,
            (SELECT COUNT(1) FROM lms_edu_regist b WHERE b.delete_yn = 'n' AND a.detail_idx = b.detail_idx AND b.regist_state = '2' AND b.member_idx != '0') edu_reg_cnt,
            (SELECT COUNT(1) FROM lms_edu_regist b WHERE b.delete_yn = 'n' AND a.detail_idx = b.detail_idx AND b.edu_state = '2' AND b.member_idx != '0') edu_train_cnt,
            (CURRENT_TIMESTAMP BETWEEN a.edu_accept_bgn_date AND a.edu_train_end_date) edu_open_state
		FROM lms_edu_detail a
		WHERE
			delete_yn = 'n'
			AND (insert_idx = #{memberIdx} OR edu_idx in (SELECT edu_idx FROM lms_edu b WHERE b.delete_yn = 'n' AND b.member_idx = #{memberIdx}))
		ORDER BY
		<choose>
			<otherwise>
				edu_reg_cnt DESC
			</otherwise>
		</choose>
	</select>
	
	<select id="detailStat" parameterType="map" resultType="kepco.lms.edu.detail.DetailVo">
		SELECT 
			a.*, f.edu_title, f.edu_keyword, f.edu_type,
			(SELECT member_nm FROM cms_member b WHERE b.member_idx = a.teacher_idx ) teacherNm,
			(SELECT category_nm FROM lms_edu_category b WHERE b.category_idx = f.category_idx) eduCateNm,
			(SELECT po_subject FROM lms_poll b WHERE a.po_idx = b.po_idx) po_subject,
			(SELECT ev_subject FROM lms_evaluation b WHERE a.ev_idx = b.ev_idx) ev_subject,
            (SELECT COUNT(1) FROM lms_edu_regist b INNER JOIN cms_member c ON b.member_idx = c.member_idx WHERE b.delete_yn = 'n' AND c.delete_yn = 'n' AND a.detail_idx = b.detail_idx AND b.regist_state != '3' AND b.member_idx != '0' ) edu_reg_cnt,
            (SELECT COUNT(1) FROM lms_edu_regist b INNER JOIN cms_member c ON b.member_idx = c.member_idx WHERE b.delete_yn = 'n' AND c.delete_yn = 'n' AND a.detail_idx = b.detail_idx AND b.regist_state = '2' AND b.member_idx != '0' ) edu_accept_cnt,
            (SELECT COUNT(1) FROM lms_edu_regist b WHERE b.delete_yn = 'n' AND a.detail_idx = b.detail_idx AND b.regist_state != '3' AND b.member_idx = '0') edu_bot_cnt,
            CONCAT(
			    IF(
			        FLOOR(AVG(IF(p.end_time IS NOT NULL, TIMESTAMPDIFF(SECOND, p.start_time, p.end_time), 0)) / 60) > 0,
			        CONCAT(FLOOR(AVG(IF(p.end_time IS NOT NULL, TIMESTAMPDIFF(SECOND, p.start_time, p.end_time), 0)) / 60), ':'),
			        '0:'
			    ),
			    LPAD(FLOOR(AVG(IF(p.end_time IS NOT NULL, TIMESTAMPDIFF(SECOND, p.start_time, p.end_time), 0)) % 60), 2, '0')
			) AS play_time_avg,
			CONCAT(
			    FLOOR(MAX(IF(p.end_time IS NOT NULL, TIMESTAMPDIFF(SECOND, p.start_time, p.end_time), 0)) / 60), ':', 
			    LPAD(MAX(IF(p.end_time IS NOT NULL, TIMESTAMPDIFF(SECOND, p.start_time, p.end_time), 0)) % 60, 2, '0')
			) AS play_time_max,
			CONCAT(
			    FLOOR(MIN(IF(p.end_time IS NOT NULL, TIMESTAMPDIFF(SECOND, p.start_time, p.end_time), 0)) / 60), ':', 
			    LPAD(MIN(IF(p.end_time IS NOT NULL, TIMESTAMPDIFF(SECOND, p.start_time, p.end_time), 0)) % 60, 2, '0')
			) AS play_time_min,
			
			COALESCE(SUM(CASE WHEN b.delete_yn = 'n' THEN 1 ELSE 0 END), 0) total_cnt, 
		    COALESCE(SUM(CASE WHEN b.risk_factor = '1' AND b.delete_yn = 'n' THEN 1 ELSE 0 END), 0) es_cnt,
		    COALESCE(SUM(CASE WHEN b.risk_factor = '2' AND b.delete_yn = 'n' THEN 1 ELSE 0 END), 0) fall_cnt,
		    COALESCE(SUM(CASE WHEN b.risk_factor = '3' AND b.delete_yn = 'n' THEN 1 ELSE 0 END), 0) care_cnt,
		    COALESCE(SUM(CASE WHEN b.risk_factor = '4' AND b.delete_yn = 'n' THEN 1 ELSE 0 END), 0) load_cnt,
		    COALESCE(SUM(CASE WHEN b.delete_yn = 'n' AND IFNULL(b.event_id, '') != '' THEN 1 ELSE 0 END), 0) accident_cnt
		FROM lms_edu_detail a
		JOIN lms_edu f ON a.edu_idx = f.edu_idx
		LEFT JOIN lms_edu_play p ON a.detail_idx = p.detail_idx
		LEFT JOIN lms_edu_event b ON p.play_idx = b.play_idx
			<include refid="selectWhere"/>
	</select>
	
	<select id="eduStat" parameterType="map" resultType="kepco.lms.edu.EduVo">
		SELECT  
			a.*,
			(SELECT member_nm FROM cms_member b WHERE b.member_idx = a.member_idx ) teacherNm,
			(SELECT category_nm FROM lms_edu_category b WHERE b.category_idx = a.category_idx) eduCateNm,
            CONCAT(
			    IF(
			        FLOOR(AVG(IF(p.end_time IS NOT NULL, TIMESTAMPDIFF(SECOND, p.start_time, p.end_time), 0)) / 60) > 0,
			        CONCAT(FLOOR(AVG(IF(p.end_time IS NOT NULL, TIMESTAMPDIFF(SECOND, p.start_time, p.end_time), 0)) / 60), ':'),
			        '0:'
			    ),
			    LPAD(FLOOR(AVG(IF(p.end_time IS NOT NULL, TIMESTAMPDIFF(SECOND, p.start_time, p.end_time), 0)) % 60), 2, '0')
			) AS play_time_avg,
			CONCAT(
			    FLOOR(MAX(IF(p.end_time IS NOT NULL, TIMESTAMPDIFF(SECOND, p.start_time, p.end_time), 0)) / 60), ':', 
			    LPAD(MAX(IF(p.end_time IS NOT NULL, TIMESTAMPDIFF(SECOND, p.start_time, p.end_time), 0)) % 60, 2, '0')
			) AS play_time_max,
			CONCAT(
			    FLOOR(MIN(IF(p.end_time IS NOT NULL, TIMESTAMPDIFF(SECOND, p.start_time, p.end_time), 0)) / 60), ':', 
			    LPAD(MIN(IF(p.end_time IS NOT NULL, TIMESTAMPDIFF(SECOND, p.start_time, p.end_time), 0)) % 60, 2, '0')
			) AS play_time_min,
			COALESCE(SUM(CASE WHEN b.delete_yn = 'n' THEN 1 ELSE 0 END), 0) total_cnt, 
		    COALESCE(SUM(CASE WHEN b.risk_factor = '1' AND b.delete_yn = 'n' THEN 1 ELSE 0 END), 0) es_cnt,
		    COALESCE(SUM(CASE WHEN b.risk_factor = '2' AND b.delete_yn = 'n' THEN 1 ELSE 0 END), 0) fall_cnt,
		    COALESCE(SUM(CASE WHEN b.risk_factor = '3' AND b.delete_yn = 'n' THEN 1 ELSE 0 END), 0) care_cnt,
		    COALESCE(SUM(CASE WHEN b.risk_factor = '4' AND b.delete_yn = 'n' THEN 1 ELSE 0 END), 0) load_cnt,
		    COALESCE(SUM(CASE WHEN b.delete_yn = 'n' AND IFNULL(b.event_id, '') != '' THEN 1 ELSE 0 END), 0) accident_cnt
			
		FROM lms_edu a
		JOIN lms_edu_detail f ON a.edu_idx = f.edu_idx
		LEFT JOIN lms_edu_play p ON f.detail_idx = p.detail_idx
		LEFT JOIN lms_edu_event b ON p.play_idx = b.play_idx
		<include refid="selectWhere"/>
		AND f.edu_idx = #{eduIdx}
	</select>
	
	<select id="playTime" parameterType="map" resultType="kepco.lms.edu.stat.EdustatVo">
		SELECT 
		    AVG(TIMESTAMPDIFF(SECOND, p.start_time, p.end_time)) AS play_time_avg,
		    MAX(TIMESTAMPDIFF(SECOND, p.start_time, p.end_time)) AS play_time_max,
		    MIN(TIMESTAMPDIFF(SECOND, p.start_time, p.end_time)) AS play_time_min
		FROM lms_edu_detail a
		JOIN lms_edu f ON a.edu_idx = f.edu_idx
		LEFT JOIN lms_edu_play p ON a.detail_idx = p.detail_idx
			<include refid="selectWhere"/>
		<if test="!@kepco.util.StrUtil@isBlank(eduIdx)">
			AND a.edu_idx = #{eduIdx}
		</if>	
	</select>
	
	<select id="riskFactorByPeriod" parameterType="map" resultType="kepco.lms.edu.stat.EdustatVo">
		SELECT
			COALESCE(SUM(CASE WHEN a.delete_yn = 'n' THEN 1 ELSE 0 END), 0) total_cnt, 
		    COALESCE(SUM(CASE WHEN a.risk_factor = '1' AND a.delete_yn = 'n' THEN 1 ELSE 0 END), 0) es_cnt,
		    COALESCE(SUM(CASE WHEN a.risk_factor = '2' AND a.delete_yn = 'n' THEN 1 ELSE 0 END), 0) fall_cnt,
		    COALESCE(SUM(CASE WHEN a.risk_factor = '3' AND a.delete_yn = 'n' THEN 1 ELSE 0 END), 0) care_cnt,
		    COALESCE(SUM(CASE WHEN a.risk_factor = '4' AND a.delete_yn = 'n' THEN 1 ELSE 0 END), 0) load_cnt,
		    COALESCE(SUM(CASE WHEN NULLIF(a.event_id, '') IS NOT NULL AND a.delete_yn = 'n' THEN 1 ELSE 0 END), 0) accident_cnt
		FROM lms_edu_event a
		LEFT JOIN lms_edu_play b ON a.play_idx = b.play_idx
		LEFT JOIN lms_edu_detail c ON b.detail_idx = c.detail_idx
		WHERE a.delete_yn = 'n' 
		<if test="!@kepco.util.StrUtil@isBlank(detailIdx)">
			AND b.detail_idx = #{detailIdx}
		</if>
		<if test="!@kepco.util.StrUtil@isBlank(eduIdx)">
			AND c.edu_idx = #{eduIdx}
		</if>
		<if test="'WEEK'.equals(unit)">
		    AND event_start_time > DATE_SUB(CURRENT_DATE(), INTERVAL #{startPeriod} WEEK)
		    AND DATE_SUB(CURRENT_DATE(), INTERVAL #{endPeriod} WEEK) > event_start_time
		</if>
		<if test="'MONTH'.equals(unit)">
		    AND event_start_time > DATE_SUB(CURRENT_DATE(), INTERVAL #{startPeriod} MONTH)
		    AND DATE_SUB(CURRENT_DATE(), INTERVAL #{endPeriod} MONTH) > event_start_time
		</if>
	</select>
	
	
	<select id="accidentReasonRank" parameterType="map" resultType="kepco.lms.edu.stat.EdustatVo">
		SELECT
		    COALESCE(accidentReasonRank1, 'no data') AS accidentReasonRank1,
		    COALESCE(accidentReasonRank2, 'no data') AS accidentReasonRank2,
		    COALESCE(accidentReasonRank3, 'no data') AS accidentReasonRank3,
		    COALESCE(accidentReasonRank4, 'no data') AS accidentReasonRank4,
		    COALESCE(accidentReasonRank5, 'no data') AS accidentReasonRank5
		FROM (
		    SELECT
		        MAX(CASE WHEN ranking = 1 THEN accident_cause ELSE NULL END) AS accidentReasonRank1,
		        MAX(CASE WHEN ranking = 2 THEN accident_cause ELSE NULL END) AS accidentReasonRank2,
		        MAX(CASE WHEN ranking = 3 THEN accident_cause ELSE NULL END) AS accidentReasonRank3,
		        MAX(CASE WHEN ranking = 4 THEN accident_cause ELSE NULL END) AS accidentReasonRank4,
		        MAX(CASE WHEN ranking = 5 THEN accident_cause ELSE NULL END) AS accidentReasonRank5
		    FROM (
		        SELECT
		            accident_cause,
		            ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS ranking
		        FROM lms_edu_event a
		        LEFT JOIN lms_edu_accident c ON a.event_id = c.event_id
		        LEFT JOIN lms_edu_accident_content d ON c.accident_code = d.accident_code
		        LEFT JOIN lms_edu_play b ON a.play_idx = b.play_idx
		        LEFT JOIN lms_edu_detail e ON b.detail_idx = e.detail_idx
		        WHERE YEAR(event_start_time) = YEAR(CURRENT_DATE())
		        AND a.delete_yn = 'n'
		        <if test="!@kepco.util.StrUtil@isBlank(detailIdx)">
					AND b.detail_idx = #{detailIdx}
				</if>
		        <if test="!@kepco.util.StrUtil@isBlank(eduIdx)">
					AND e.edu_idx = #{eduIdx}
				</if>
		        GROUP BY d.accident_cause
		    ) AS ranked
		    WHERE 5 >= ranking 
		) AS accidentReasons;

	</select>
	
	<select id="accidentReasonRankCnt" parameterType="map" resultType="kepco.lms.edu.stat.EdustatVo">
		SELECT 
	    IFNULL(SUM(CASE WHEN d.accident_cause = #{accidentReasonRank1} THEN 1 ELSE 0 END), 0) AS accident_reason_rank_cnt1,
	    IFNULL(SUM(CASE WHEN d.accident_cause = #{accidentReasonRank2} THEN 1 ELSE 0 END), 0) AS accident_reason_rank_cnt2,
	    IFNULL(SUM(CASE WHEN d.accident_cause = #{accidentReasonRank3} THEN 1 ELSE 0 END), 0) AS accident_reason_rank_cnt3,
	    IFNULL(SUM(CASE WHEN d.accident_cause = #{accidentReasonRank4} THEN 1 ELSE 0 END), 0) AS accident_reason_rank_cnt4,
	    IFNULL(SUM(CASE WHEN d.accident_cause = #{accidentReasonRank5} THEN 1 ELSE 0 END), 0) AS accident_reason_rank_cnt5
		FROM lms_edu_event a
		LEFT JOIN lms_edu_accident c ON a.event_id = c.event_id
		LEFT JOIN lms_edu_accident_content d ON c.accident_code = d.accident_code
		LEFT JOIN lms_edu_play b ON a.play_idx = b.play_idx
		LEFT JOIN lms_edu_detail e ON b.detail_idx = e.detail_idx
		WHERE
		a.delete_yn = 'n'
		<if test="!@kepco.util.StrUtil@isBlank(detailIdx)">
			AND b.detail_idx = #{detailIdx}
		</if>
		<if test="!@kepco.util.StrUtil@isBlank(eduIdx)">
			AND e.edu_idx = #{eduIdx}
		</if>
		AND event_start_time > DATE_SUB(CURRENT_DATE(), INTERVAL #{startPeriod} MONTH)
		AND DATE_SUB(CURRENT_DATE(), INTERVAL #{endPeriod} MONTH) > event_start_time
	</select>
	
	<select id="shareByRole" parameterType="map" resultType="kepco.lms.edu.stat.EdustatVo">
		SELECT
			SUM(CASE WHEN work_role = '1' THEN 1 ELSE 0 END) AS main_cnt,
		    SUM(CASE WHEN work_role = '2' THEN 1 ELSE 0 END) AS sub_cnt,
		    SUM(CASE WHEN work_role = '3' THEN 1 ELSE 0 END) AS ground_cnt,
		    SUM(CASE WHEN work_role = '4' THEN 1 ELSE 0 END) AS super_cnt
		FROM lms_edu_play a 
		WHERE
		a.delete_yn = 'n'
		<if test="!@kepco.util.StrUtil@isBlank(detailIdx)">
			AND a.detail_idx = #{detailIdx}
		</if>
		<if test="!@kepco.util.StrUtil@isBlank(memberId)">
			AND a.member_id = #{memberId}
		</if>
		<if test="!@kepco.util.StrUtil@isBlank(memberIdx)">
			AND a.member_idx = #{memberIdx}
		</if>
		LIMIT 1
	</select>
	
	<select id="shareByAccident" parameterType="map" resultType="kepco.lms.edu.stat.EdustatVo">
		SELECT 
		    c.accident_type, 
		    COUNT(c.accident_type) AS accident_cnt
		FROM lms_edu_event a
		LEFT JOIN lms_edu_accident b ON a.event_id = b.event_id
		LEFT JOIN lms_edu_accident_content c ON b.accident_code = c.accident_code
		LEFT JOIN lms_edu_play d ON a.play_idx = d.play_idx 
		LEFT JOIN lms_edu_detail e ON d.detail_idx = e.detail_idx 
		WHERE
		    a.delete_yn = 'n'
		    AND b.delete_yn = 'n'
		    AND c.delete_yn = 'n'
		    AND a.accident_yn = 'y'
		    <if test="!@kepco.util.StrUtil@isBlank(detailIdx)">
				AND d.detail_idx = #{detailIdx}
			</if>
			<if test="!@kepco.util.StrUtil@isBlank(memberId)">
				AND d.member_id = #{memberId}
			</if>
			<if test="!@kepco.util.StrUtil@isBlank(memberIdx)">
				AND d.member_idx = #{memberIdx}
			</if>
		    <if test="!@kepco.util.StrUtil@isBlank(eduIdx)">
				AND e.edu_idx = #{eduIdx}
			</if>
		GROUP BY 
		c.accident_type
	</select>
	
	<select id="accidentLocation" parameterType="map" resultType="kepco.lms.edu.stat.EdustatVo">
		SELECT 
		    b.event_location AS accident_location, 
		    COUNT(b.event_location) AS accident_location_cnt
		FROM lms_edu_event a
		LEFT JOIN lms_edu_accident b ON a.event_id = b.event_id
		LEFT JOIN lms_edu_play d ON a.play_idx = d.play_idx 
		LEFT JOIN lms_edu_detail e ON d.detail_idx = e.detail_idx 
		WHERE
		    a.delete_yn = 'n'
		    AND b.delete_yn = 'n'
		    AND IFNULL(a.event_id, '') != ''
		    <if test="!@kepco.util.StrUtil@isBlank(detailIdx)">
				AND d.detail_idx = #{detailIdx}
			</if>
			<if test="!@kepco.util.StrUtil@isBlank(memberId)">
				AND d.member_id = #{memberId}
			</if>
			<if test="!@kepco.util.StrUtil@isBlank(memberIdx)">
				AND d.member_idx = #{memberIdx}
			</if>
		    <if test="!@kepco.util.StrUtil@isBlank(eduIdx)">
				AND e.edu_idx = #{eduIdx}
			</if>
		GROUP BY 
		b.event_location
		
	</select>
	
	<select id="accidentObjectFactor" parameterType="map" resultType="kepco.lms.edu.stat.EdustatVo">
		SELECT 
		    b.object_factor AS accident_object_factor, 
		    COUNT(b.object_factor) AS accident_object_factor_cnt
		FROM lms_edu_event a
		LEFT JOIN lms_edu_accident b ON a.event_id = b.event_id
		LEFT JOIN lms_edu_play d ON a.play_idx = d.play_idx 
		LEFT JOIN lms_edu_detail e ON d.detail_idx = e.detail_idx 
		
		WHERE
		    a.delete_yn = 'n'
		    AND b.delete_yn = 'n'
		    AND a.accident_yn = 'y'
		    <if test="!@kepco.util.StrUtil@isBlank(detailIdx)">
				AND d.detail_idx = #{detailIdx}
			</if>
			<if test="!@kepco.util.StrUtil@isBlank(memberId)">
				AND d.member_id = #{memberId}
			</if>
			<if test="!@kepco.util.StrUtil@isBlank(memberIdx)">
				AND d.member_idx = #{memberIdx}
			</if>
		    <if test="!@kepco.util.StrUtil@isBlank(eduIdx)">
				AND e.edu_idx = #{eduIdx}
			</if>
		GROUP BY 
		b.object_factor
		
		LIMIT 3
	</select>
	
	<select id="accidentCntByRole" parameterType="map" resultType="kepco.lms.edu.stat.EdustatVo">
		SELECT 
		    COALESCE(SUM(CASE WHEN RIGHT(a.task_id, 1) = 1 AND a.risk_factor = '1' THEN 1 ELSE 0 END), 0) AS main_es_cnt,
		    COALESCE(SUM(CASE WHEN RIGHT(a.task_id, 1) = 1 AND a.risk_factor = '2' THEN 1 ELSE 0 END), 0) AS main_fall_cnt,
		    COALESCE(SUM(CASE WHEN RIGHT(a.task_id, 1) = 1 AND a.risk_factor = '3' THEN 1 ELSE 0 END), 0) AS main_care_cnt,
		    COALESCE(SUM(CASE WHEN RIGHT(a.task_id, 1) = 1 AND a.risk_factor = '4' THEN 1 ELSE 0 END), 0) AS main_load_cnt,
		    COALESCE(SUM(CASE WHEN RIGHT(a.task_id, 1) = 2 AND a.risk_factor = '1' THEN 1 ELSE 0 END), 0) AS sub_es_cnt,
		    COALESCE(SUM(CASE WHEN RIGHT(a.task_id, 1) = 2 AND a.risk_factor = '2' THEN 1 ELSE 0 END), 0) AS sub_fall_cnt,
		    COALESCE(SUM(CASE WHEN RIGHT(a.task_id, 1) = 2 AND a.risk_factor = '3' THEN 1 ELSE 0 END), 0) AS sub_care_cnt,
		    COALESCE(SUM(CASE WHEN RIGHT(a.task_id, 1) = 2 AND a.risk_factor = '4' THEN 1 ELSE 0 END), 0) AS sub_load_cnt,
		    COALESCE(SUM(CASE WHEN RIGHT(a.task_id, 1) = 3 AND a.risk_factor = '1' THEN 1 ELSE 0 END), 0) AS ground_es_cnt,
		    COALESCE(SUM(CASE WHEN RIGHT(a.task_id, 1) = 3 AND a.risk_factor = '2' THEN 1 ELSE 0 END), 0) AS ground_fall_cnt,
		    COALESCE(SUM(CASE WHEN RIGHT(a.task_id, 1) = 3 AND a.risk_factor = '3' THEN 1 ELSE 0 END), 0) AS ground_care_cnt,
		    COALESCE(SUM(CASE WHEN RIGHT(a.task_id, 1) = 3 AND a.risk_factor = '4' THEN 1 ELSE 0 END), 0) AS ground_load_cnt,
		    COALESCE(SUM(CASE WHEN RIGHT(a.task_id, 1) = 4 AND a.risk_factor = '1' THEN 1 ELSE 0 END), 0) AS super_es_cnt,
		    COALESCE(SUM(CASE WHEN RIGHT(a.task_id, 1) = 4 AND a.risk_factor = '2' THEN 1 ELSE 0 END), 0) AS super_fall_cnt,
		    COALESCE(SUM(CASE WHEN RIGHT(a.task_id, 1) = 4 AND a.risk_factor = '3' THEN 1 ELSE 0 END), 0) AS super_care_cnt,
		    COALESCE(SUM(CASE WHEN RIGHT(a.task_id, 1) = 4 AND a.risk_factor = '4' THEN 1 ELSE 0 END), 0) AS super_load_cnt,
		    COALESCE(SUM(CASE WHEN RIGHT(a.task_id, 1) = 1 AND IFNULL(a.event_id, '') != '' THEN 1 ELSE 0 END), 0) AS main_accident_cnt,
		    COALESCE(SUM(CASE WHEN RIGHT(a.task_id, 1) = 2 AND IFNULL(a.event_id, '') != '' THEN 1 ELSE 0 END), 0) AS sub_accident_cnt,
		    COALESCE(SUM(CASE WHEN RIGHT(a.task_id, 1) = 3 AND IFNULL(a.event_id, '') != '' THEN 1 ELSE 0 END), 0) AS ground_accident_cnt,
		    COALESCE(SUM(CASE WHEN RIGHT(a.task_id, 1) = 4 AND IFNULL(a.event_id, '') != '' THEN 1 ELSE 0 END), 0) AS super_accident_cnt
		FROM 
		    lms_edu_event a
		   LEFT JOIN lms_edu_play p ON p.play_idx = a.play_idx
		   LEFT JOIN lms_edu_detail b ON p.detail_idx = b.detail_idx
		WHERE a.delete_yn = 'n' 
		AND p.delete_yn = 'n'
		<if test="!@kepco.util.StrUtil@isBlank(detailIdx)">
			AND p.detail_idx = #{detailIdx}
		</if>
		<if test="!@kepco.util.StrUtil@isBlank(eduIdx)">
			AND b.edu_idx = #{eduIdx}
		</if>
	</select>
	
	<select id="statOverview" parameterType="map" resultType="kepco.lms.edu.stat.EdustatVo">
		SELECT 
            CONCAT(
			    IF(
			        FLOOR(AVG(IF(p.end_time IS NOT NULL, TIMESTAMPDIFF(SECOND, p.start_time, p.end_time), 0)) / 60) > 0,
			        CONCAT(FLOOR(AVG(IF(p.end_time IS NOT NULL, TIMESTAMPDIFF(SECOND, p.start_time, p.end_time), 0)) / 60), ':'),
			        '0:'
			    ),
			    LPAD(FLOOR(AVG(IF(p.end_time IS NOT NULL, TIMESTAMPDIFF(SECOND, p.start_time, p.end_time), 0)) % 60), 2, '0')
			) AS play_time_avg,
			CONCAT(
			    FLOOR(MAX(IF(p.end_time IS NOT NULL, TIMESTAMPDIFF(SECOND, p.start_time, p.end_time), 0)) / 60), ':', 
			    LPAD(MAX(IF(p.end_time IS NOT NULL, TIMESTAMPDIFF(SECOND, p.start_time, p.end_time), 0)) % 60, 2, '0')
			) AS play_time_max,
			CONCAT(
			    FLOOR(MIN(IF(p.end_time IS NOT NULL, TIMESTAMPDIFF(SECOND, p.start_time, p.end_time), 0)) / 60), ':', 
			    LPAD(MIN(IF(p.end_time IS NOT NULL, TIMESTAMPDIFF(SECOND, p.start_time, p.end_time), 0)) % 60, 2, '0')
			) AS play_time_min,
			
			COALESCE(SUM(CASE WHEN b.delete_yn = 'n' THEN 1 ELSE 0 END), 0) total_cnt, 
		    COALESCE(SUM(CASE WHEN b.risk_factor = '1' AND b.delete_yn = 'n' THEN 1 ELSE 0 END), 0) es_cnt,
		    COALESCE(SUM(CASE WHEN b.risk_factor = '2' AND b.delete_yn = 'n' THEN 1 ELSE 0 END), 0) fall_cnt,
		    COALESCE(SUM(CASE WHEN b.risk_factor = '3' AND b.delete_yn = 'n' THEN 1 ELSE 0 END), 0) care_cnt,
		    COALESCE(SUM(CASE WHEN b.risk_factor = '4' AND b.delete_yn = 'n' THEN 1 ELSE 0 END), 0) load_cnt,
		    COALESCE(SUM(CASE WHEN b.delete_yn = 'n' AND IFNULL(b.event_id, '') != '' THEN 1 ELSE 0 END), 0) accident_cnt
		FROM lms_edu_play p
		LEFT JOIN lms_edu_event b ON p.play_idx = b.play_idx
		WHERE p.delete_yn = 'n'
	</select>
	
	<select id="accidentTypeNm" parameterType="map" resultType="String">
		SELECT 
		    c.accident_type
		FROM lms_edu_event a
		LEFT JOIN lms_edu_accident b ON a.event_id = b.event_id
		LEFT JOIN lms_edu_accident_content c ON b.accident_code = c.accident_code
		LEFT JOIN lms_edu_play d ON a.play_idx = d.play_idx 
		LEFT JOIN lms_edu_module_play f ON a.module_play_idx = f.module_play_idx  
		WHERE
		    a.delete_yn = 'n'
		    AND b.delete_yn = 'n'
		    AND a.accident_yn = 'y'
		    <if test="!@kepco.util.StrUtil@isBlank(detailIdx)">
				AND d.detail_idx = #{detailIdx}
			</if>
			<if test="!@kepco.util.StrUtil@isBlank(moduleCd)">
				AND f.module_Cd = #{moduleCd}
			</if>
			<if test="!@kepco.util.StrUtil@isBlank(memberIdx)">
				AND d.member_idx = #{memberIdx}
			</if>
		GROUP BY 
		c.accident_type
		
	</select>
	
	<select id="accidentType" parameterType="map" resultType="kepco.lms.edu.stat.chart.EduStatChartVo">
		SELECT 
		    b.object_factor, 
		    c.accident_type,
		    COUNT(b.object_factor) AS object_factor_cnt
		FROM lms_edu_event a
		LEFT JOIN lms_edu_accident b ON a.event_id = b.event_id
		LEFT JOIN lms_edu_accident_content c ON b.accident_code = c.accident_code
		LEFT JOIN lms_edu_play d ON a.play_idx = d.play_idx 
		LEFT JOIN lms_edu_module_play f ON a.module_play_idx = f.module_play_idx  
		WHERE
		    a.delete_yn = 'n'
		    AND b.delete_yn = 'n'
		    AND a.accident_yn = 'y'
		    <if test="!@kepco.util.StrUtil@isBlank(accidentType)">
				AND c.accident_type = #{accidentType}
			</if>
		    <if test="!@kepco.util.StrUtil@isBlank(detailIdx)">
				AND d.detail_idx = #{detailIdx}
			</if>
			<if test="!@kepco.util.StrUtil@isBlank(moduleCd)">
				AND f.module_Cd = #{moduleCd}
			</if>
			<if test="!@kepco.util.StrUtil@isBlank(memberIdx)">
				AND d.member_idx = #{memberIdx}
			</if>
		GROUP BY 
		b.object_factor
		
	</select>
	
	<select id="accidentCause" parameterType="map" resultType="kepco.lms.edu.stat.chart.EduStatChartVo">
		SELECT 
		    c.accident_cause, 
		    COUNT(c.accident_cause) AS accident_cause_cnt
		FROM lms_edu_event a
		LEFT JOIN lms_edu_accident b ON a.event_id = b.event_id
		LEFT JOIN lms_edu_accident_content c ON b.accident_code = c.accident_code
		LEFT JOIN lms_edu_play d ON a.play_idx = d.play_idx 
		LEFT JOIN lms_edu_module_play f ON a.module_play_idx = f.module_play_idx  
		WHERE
		    a.delete_yn = 'n'
		    AND b.delete_yn = 'n'
		    AND a.accident_yn = 'y'
		    <if test="!@kepco.util.StrUtil@isBlank(detailIdx)">
				AND d.detail_idx = #{detailIdx}
			</if>
			<if test="!@kepco.util.StrUtil@isBlank(moduleCd)">
				AND f.module_Cd = #{moduleCd}
			</if>
			<if test="!@kepco.util.StrUtil@isBlank(memberIdx)">
				AND d.member_idx = #{memberIdx}
			</if>
		GROUP BY c.accident_cause
		
	</select>
	
	<select id="riskStatusByTeam" parameterType="map" resultType="kepco.lms.edu.stat.chart.EduStatChartVo">
		SELECT 
		    MAX(subquery.risk_level_count) AS max_risk_cnt,
		    MIN(subquery.risk_level_count) AS min_risk_cnt,
		    AVG(subquery.risk_level_count) AS avg_risk_cnt
		FROM (
		    SELECT 
		        a.play_team_idx,
		        COUNT(*) AS risk_level_count
		    FROM lms_edu_play_team a
		    LEFT JOIN lms_edu_play b ON a.play_team_idx = b.play_team_idx 
		    LEFT JOIN lms_edu_module_play c ON b.play_idx = c.play_idx 
		    LEFT JOIN lms_edu_event d ON c.module_play_idx = d.module_play_idx
		    WHERE
	        a.delete_yn = 'n'
	        AND b.delete_yn = 'n' 
	        AND c.delete_yn = 'n'
	        AND d.delete_yn = 'n'
		        <if test="!@kepco.util.StrUtil@isBlank(riskFactor)">
		            AND d.risk_factor = #{riskFactor}
		        </if>
		        <if test="!@kepco.util.StrUtil@isBlank(riskLevel)">
		            AND d.risk_level = #{riskLevel}
		        </if>
		        <if test="!@kepco.util.StrUtil@isBlank(detailIdx)">
		            AND b.detail_idx = #{detailIdx}
		        </if>
		        <if test="!@kepco.util.StrUtil@isBlank(moduleCd)">
		            AND c.module_Cd = #{moduleCd}
		        </if>
		     GROUP BY a.play_team_idx
		 ) AS subquery
	</select>
	
	<select id="usrList" parameterType="map" resultType="kepco.lms.edu.stat.usr.EduStatUsrVo">
		SELECT
		    a.member_idx, a.member_id, a.member_nm,
		    MIN(p_start.start_time) AS start_time,
		    MAX(p_end.end_time) AS end_time,
		    SUM(TIMESTAMPDIFF(MINUTE, p.start_time, p.end_time)) AS sum_play_minute,
		    COUNT(p.member_idx) AS play_cnt,
		    SUM(CASE WHEN p.work_role = '1' THEN 1 ELSE 0 END) AS main_cnt,
		    SUM(CASE WHEN p.work_role = '2' THEN 1 ELSE 0 END) AS sub_cnt,
		    SUM(CASE WHEN p.work_role = '3' THEN 1 ELSE 0 END) AS ground_cnt,
		    SUM(CASE WHEN p.work_role = '4' THEN 1 ELSE 0 END) AS super_cnt
		FROM cms_member a
		LEFT JOIN lms_edu_play p_start ON a.member_idx = p_start.member_idx
		LEFT JOIN lms_edu_play p_end ON a.member_idx = p_end.member_idx
		LEFT JOIN lms_edu_play p ON a.member_idx = p.member_idx
		LEFT JOIN lms_edu_detail d ON p.detail_idx = d.detail_idx
		WHERE
		    a.delete_yn = 'n'
		    AND a.member_type2 = '1'
		    AND (SELECT COUNT(*) FROM lms_edu_play p_count WHERE a.member_idx = p_count.member_idx) > 0
		    AND p_start.start_time = (SELECT MIN(start_time) FROM lms_edu_play p_min WHERE a.member_idx = p_min.member_idx)
		    AND p_end.end_time = (SELECT MAX(end_time) FROM lms_edu_play p_max WHERE a.member_idx = p_max.member_idx)
		    <if test="!@kepco.util.StrUtil@isBlank(startDate)">
		        AND DATE_FORMAT(p_start.start_time, '%Y-%m-%d') >= #{startDate}
		    </if>
		    <if test="!@kepco.util.StrUtil@isBlank(endDate)">
		        AND #{endDate} >= DATE_FORMAT(p_end.end_time, '%Y-%m-%d')
		    </if>
		    <if test="!@kepco.util.StrUtil@isBlank(scWord)">
				AND (
					a.member_id LIKE CONCAT ('%',#{scWord},'%') 
					OR a.member_nm LIKE CONCAT ('%',#{scWord},'%') 
				) 
			</if>
		GROUP BY a.member_idx, a.member_id, a.member_nm;
				
	</select>
	
	<select id="usrPlayList" parameterType="map" resultType="kepco.lms.edu.stat.usr.EduStatUsrVo">
		SELECT
			a.*, 
			b.train_title,
			(SELECT member_nm FROM cms_member c WHERE c.member_idx = b.teacher_idx) teacher_nm,
			TIMESTAMPDIFF(MINUTE, a.start_time, a.end_time) AS play_minute,
			(SELECT COUNT(DISTINCT module_cd) FROM lms_edu_module_play emp WHERE emp.play_idx = a.play_idx) AS module_cd_cnt,
			(SELECT COUNT(DISTINCT module_play_idx) FROM lms_edu_module_play emp WHERE emp.play_idx = a.play_idx) AS module_play_cnt
			
		FROM lms_edu_play a
		LEFT JOIN lms_edu_detail b ON a.detail_idx = b.detail_idx
        WHERE
		a.delete_yn = 'n'
		AND a.member_idx = #{memberIdx}
	</select>
	
	<select id="riskStatusByUsr" parameterType="map" resultType="kepco.lms.edu.stat.chart.EduStatChartVo">
		SELECT 
		    MAX(subquery.risk_level_count) AS max_risk_cnt,
		    MIN(subquery.risk_level_count) AS min_risk_cnt,
		    AVG(subquery.risk_level_count) AS avg_risk_cnt
		FROM (
		    SELECT 
		        a.play_idx,
		        COUNT(*) AS risk_level_count
		    FROM lms_edu_play a
		    LEFT JOIN lms_edu_event b ON a.play_idx = b.play_idx
		    
	        WHERE
		    a.delete_yn = 'n'
		    AND b.delete_yn = 'n'
		        <if test="!@kepco.util.StrUtil@isBlank(riskFactor)">
		            AND b.risk_factor = #{riskFactor}
		        </if>
		        <if test="!@kepco.util.StrUtil@isBlank(riskLevel)">
		            AND b.risk_level = #{riskLevel}
		        </if>
		        <if test="!@kepco.util.StrUtil@isBlank(memberIdx)">
		            AND a.member_idx = #{memberIdx}
		        </if>
		    GROUP BY a.play_idx    
		 ) AS subquery
	</select>
	
	<select id="accidentRateByTrain" parameterType="map" resultType="kepco.lms.edu.stat.chart.EduStatChartVo">
		SELECT 
	        a.member_idx, a.member_id, a.member_nm, 
	        (SELECT COUNT(*) FROM lms_edu_play p LEFT JOIN lms_edu_event e ON p.play_idx = e.play_idx WHERE p.member_idx = a.member_idx AND IFNULL(e.event_id, '') != '') AS accident_cnt,
		 	(SELECT SUM(TIMESTAMPDIFF(MINUTE, p.start_time, p.end_time)) FROM lms_edu_play p WHERE p.member_idx = a.member_idx) AS sum_play_minute,
		 	(SELECT COUNT(*) FROM lms_edu_play p WHERE a.member_idx = p.member_idx) AS play_cnt
	    FROM cms_member a
	    
        WHERE
	    a.delete_yn = 'n'
		AND a.member_type2 = '1'
		AND (SELECT COUNT(*) FROM lms_edu_play p WHERE a.member_idx = p.member_idx) > 0;
	</select>
	
	<select id="accidentReasonAnalysisRoleList" parameterType="map" resultType="String">
		SELECT DISTINCT work_role
		FROM lms_edu_play a
			LEFT JOIN lms_edu_event b ON a.play_idx = b.play_idx
			LEFT JOIN lms_edu_accident c ON b.event_id = c.event_id
		WHERE a.delete_yn = 'n' 
		AND a.member_idx = #{memberIdx}
	    AND IFNULL(b.event_id, '') != ''
	    AND IFNULL(c.accident_idx, '') != ''
	</select>
	
	<select id="accidentReasonAnalysisLocation" parameterType="map" resultType="kepco.lms.edu.stat.chart.EduStatChartVo">
		SELECT 
			c.event_location,
    		COUNT(*) AS event_location_cnt
		FROM	lms_edu_play a
			LEFT JOIN lms_edu_event b ON a.play_idx = b.play_idx
			LEFT JOIN lms_edu_accident c ON b.event_id = c.event_id
		WHERE	a.member_idx = #{memberIdx}
		    AND a.work_role = #{workRole}
		    AND a.delete_yn = 'n'
		    AND b.delete_yn = 'n'
		    AND IFNULL(b.event_id, '') != ''
		    AND IFNULL(c.accident_idx, '') != ''
		GROUP BY c.event_location;
	</select>
	
	<select id="accidentReasonAnalysisFactor" parameterType="map" resultType="kepco.lms.edu.stat.chart.EduStatChartVo">
		SELECT 
			c.object_factor,
    		COUNT(*) AS object_factor_cnt
		FROM	lms_edu_play a
			LEFT JOIN lms_edu_event b ON a.play_idx = b.play_idx
			LEFT JOIN lms_edu_accident c ON b.event_id = c.event_id
		WHERE	a.member_idx = #{memberIdx}
<!-- 		    AND a.work_role = #{workRole} -->
		    AND c.event_location = #{eventLocation}
		    AND a.delete_yn = 'n'
		    AND b.delete_yn = 'n'
		    AND IFNULL(b.event_id, '') != ''
		    AND IFNULL(c.accident_idx, '') != ''
		GROUP BY c.object_factor;
	</select>
	
	<select id="accidentReasonAnalysisType" parameterType="map" resultType="kepco.lms.edu.stat.chart.EduStatChartVo">
		SELECT 
			d.accident_type,
    		COUNT(*) AS accident_type_cnt
		FROM	lms_edu_play a
			LEFT JOIN lms_edu_event b ON a.play_idx = b.play_idx
			LEFT JOIN lms_edu_accident c ON b.event_id = c.event_id
			LEFT JOIN lms_edu_accident_content d ON c.accident_code = d.accident_code
		WHERE	a.member_idx = #{memberIdx}
<!-- 		    AND a.work_role = #{workRole} -->
<!-- 		    AND c.event_location = #{eventLocation} -->
            AND c.object_factor = #{objectFactor}
            AND a.delete_yn = 'n'
            AND b.delete_yn = 'n'
		    AND IFNULL(b.event_id, '') != ''
		    AND IFNULL(c.accident_idx, '') != ''
		GROUP BY d.accident_type;
	</select>
	
	<select id="trainStatByPeriod" parameterType="map" resultType="kepco.lms.edu.stat.chart.EduStatChartVo">
		SELECT DATE(a.start_time) AS start_time,
	        COALESCE(SUM(TIMESTAMPDIFF(MINUTE, a.start_time, a.end_time)), 0) AS sum_play_minute,
	        (SELECT COUNT(*) FROM lms_edu_event e LEFT JOIN lms_edu_play p ON e.play_idx = p.play_idx WHERE p.play_team_idx = a.play_team_idx AND e.delete_yn = 'n' AND p.delete_yn = 'n' AND IFNULL(e.event_id, '') != '') AS accident_cnt,
	        COUNT(DISTINCT b.member_idx) AS player_cnt,
	   	    COUNT(DISTINCT a.play_team_idx) AS play_cnt
		FROM lms_edu_play_team a
		LEFT JOIN lms_edu_play b ON a.play_team_idx = b.play_team_idx
		LEFT JOIN lms_edu_detail c ON b.detail_idx = c.detail_idx
		WHERE a.delete_yn = 'n'
		AND b.delete_yn = 'n'
			<if test="!@kepco.util.StrUtil@isBlank(detailIdx)">
				AND a.detail_idx = #{detailIdx}
			</if>
			<if test="!@kepco.util.StrUtil@isBlank(startDate)">
				AND a.start_time >= #{startDate}
			</if>
			<if test="!@kepco.util.StrUtil@isBlank(endDate)">
				AND #{endDate} >= a.end_time
			</if>
			<if test="!@kepco.util.StrUtil@isBlank(teacherNm)">
				AND c.teacher_nm = LIKE CONCAT ('%',#{teacherNm},'%') 
			</if>
			<if test="!@kepco.util.StrUtil@isBlank(scWord)">
				AND	c.train_title LIKE CONCAT ('%',#{scWord},'%') 
			</if>
		GROUP BY DATE(a.start_time)
		ORDER BY DATE(a.start_time) ASC
		LIMIT 10
	</select>
	
	<select id="myTrainStatByPeriod" parameterType="map" resultType="kepco.lms.edu.stat.chart.EduStatChartVo">
		SELECT DATE(a.start_time) AS start_time,
	        COALESCE(SUM(TIMESTAMPDIFF(MINUTE, a.start_time, a.end_time)), 0) AS sum_play_minute,
	        (SELECT COUNT(*) FROM lms_edu_event e LEFT JOIN lms_edu_play p ON e.play_idx = p.play_idx WHERE p.play_idx = a.play_idx AND e.delete_yn = 'n' AND p.delete_yn = 'n' AND IFNULL(e.event_id, '') != '') AS accident_cnt,
	        (SELECT COUNT(*) FROM lms_edu_event e LEFT JOIN lms_edu_play p ON e.play_idx = p.play_idx WHERE p.play_idx = a.play_idx AND e.delete_yn = 'n' AND p.delete_yn = 'n' AND IFNULL(e.risk_factor, '') != '') AS risk_cnt,
	        COUNT(DISTINCT a.play_idx) AS play_cnt
		FROM lms_edu_play a
		LEFT JOIN lms_edu_detail b ON a.detail_idx = b.detail_idx
		WHERE a.delete_yn = 'n'
			<if test="!@kepco.util.StrUtil@isBlank(detailIdx)">
				AND a.detail_idx = #{detailIdx}
			</if>
			<if test="!@kepco.util.StrUtil@isBlank(memberIdx)">
				AND a.member_idx = #{memberIdx}
			</if>
			<if test="!@kepco.util.StrUtil@isBlank(startDate)">
				AND a.start_time >= #{startDate}
			</if>
			<if test="!@kepco.util.StrUtil@isBlank(endDate)">
				AND #{endDate} >= a.end_time
			</if>
			<if test="!@kepco.util.StrUtil@isBlank(teacherNm)">
				AND b.teacher_nm = LIKE CONCAT ('%',#{teacherNm},'%') 
			</if>
			<if test="!@kepco.util.StrUtil@isBlank(scWord)">
				AND	b.train_title LIKE CONCAT ('%',#{scWord},'%') 
			</if>
		GROUP BY DATE(a.start_time)
		ORDER BY DATE(a.start_time) ASC
		LIMIT 10
	</select>
	
	<select id="riskFactorStatByPeriod" parameterType="map" resultType="kepco.lms.edu.stat.chart.EduStatChartVo">
		SELECT 
		    DATE_FORMAT(a.event_start_time, '%Y-%m-%d') AS start_date,
		    SUM(CASE WHEN a.risk_factor = 1 THEN 1 ELSE 0 END) AS es_cnt,
		    SUM(CASE WHEN a.risk_factor = 2 THEN 1 ELSE 0 END) AS fall_cnt,
		    SUM(CASE WHEN a.risk_factor = 3 THEN 1 ELSE 0 END) AS care_cnt,
		    SUM(CASE WHEN a.risk_factor = 4 THEN 1 ELSE 0 END) AS load_cnt
		FROM lms_edu_event a
		LEFT JOIN lms_edu_play b ON a.play_idx = b.play_idx
		LEFT JOIN lms_edu_detail c ON b.detail_idx = c.detail_idx
		WHERE a.delete_yn = 'n'
		    AND b.delete_yn = 'n'
		    AND a.event_start_time >= DATE_SUB(#{endDate}, INTERVAL #{period} WEEK)
		    <if test="!@kepco.util.StrUtil@isBlank(detailIdx)">
				AND b.detail_idx = #{b.detailIdx}
			</if>
		    <if test="!@kepco.util.StrUtil@isBlank(teacherNm)">
				AND c.teacher_nm = LIKE CONCAT ('%',#{teacherNm},'%') 
			</if>
			<if test="!@kepco.util.StrUtil@isBlank(scWord)">
				AND	c.train_title LIKE CONCAT ('%',#{scWord},'%') 
			</if>
		GROUP BY YEAR(a.event_start_time), WEEK(a.event_start_time)
		ORDER BY start_date;
	</select>


	<!-- 테이블List조회 -->
	<sql id="selectPollListWhere">
		<where>
			<choose>
				<when test="_parameter.containsKey(scDeleteYn)">
					<if test="!@kepco.util.StrUtil@isBlank(scDeleteYn)">
						AND a.delete_yn = #{scDeleteYn}
					</if>
				</when>
				<otherwise>
					AND a.delete_yn = 'n'
				</otherwise>
			</choose>
			-- 훈련명 검색조건
			<choose>
				<when test="@kepco.util.StrUtil@toStr(searchIdx) eq 'title'">
					AND b.train_title LIKE CONCAT('%', #{scWord}, '%')
				</when>
				<when test="@kepco.util.StrUtil@toStr(searchIdx) eq 'poll'">
					AND a.po_subject LIKE CONCAT('%', #{scWord}, '%')
				</when>
				<when test="@kepco.util.StrUtil@toStr(searchIdx) eq 'teacher'">
					AND c.member_nm LIKE CONCAT('%', #{scWord}, '%')
				</when>
			</choose>
		</where>
	</sql>

	<select id="selectPollList" parameterType="map" resultType="camelMap">
		SELECT
			*,
			(SELECT COUNT(distinct d.member_idx) FROM lms_edu_play d WHERE d.delete_yn = 'n' AND d.detail_idx = b.detail_idx) AS play_cnt,
			(SELECT COUNT(distinct d.member_idx) FROM lms_poll_play d WHERE d.detail_idx = b.detail_idx) AS poll_play_cnt,
			c.member_nm as teacher_nm
		FROM
			lms_poll a
		LEFT OUTER JOIN
			lms_edu_detail b
		ON
			a.po_idx=b.po_idx
		LEFT OUTER JOIN
			cms_member c
		ON
			b.teacher_idx=c.member_idx
		<include refid="selectPollListWhere"></include>
		ORDER BY
		    poll_play_cnt desc, play_cnt desc
	</select>

	<!-- 만족도조사 통계현황 목록 -->
	<select id="selectOverviewList" parameterType="map" resultType="camelMap">
		SELECT t.po_idx, t.po_subject, t.edu_count, sum(t.play_cnt) as play_cnt, sum(t.poll_play_cnt) as poll_play_cnt
		FROM (
				 SELECT
					 a.po_idx, a.po_subject,
					 (SELECT COUNT(1) FROM lms_edu_detail b WHERE a.po_idx=b.po_idx GROUP BY b.po_idx) as edu_count,
					 (SELECT COUNT(distinct c.member_idx) FROM lms_edu_play c WHERE c.delete_yn = 'n' AND c.detail_idx = b.detail_idx) as play_cnt,
					 (SELECT COUNT(distinct c.member_idx) FROM lms_poll_play c WHERE c.detail_idx = b.detail_idx) as poll_play_cnt
				 FROM
					 lms_poll a
						 LEFT OUTER JOIN
					 lms_edu_detail b
					 ON a.po_idx=b.po_idx
				 WHERE
					 a.delete_yn='N'
			 ) as t
		WHERE t.po_subject LIKE CONCAT('%', #{scWord}, '%')
		GROUP BY t.po_idx
		ORDER BY poll_play_cnt desc, play_cnt desc, edu_count desc
	</select>

	<!-- 만족도조사통계 상세 데이터 -->
	<select id="selectPollViewDetailData" parameterType="map" resultType="camelMap">
		SELECT
		    *,
		    (SELECT COUNT(distinct e.member_idx) FROM lms_edu_play e WHERE e.delete_yn='n' AND e.detail_idx=a.detail_idx) as poll_student_all_cnt,
		    (SELECT COUNT(distinct e.member_idx) FROM lms_poll_play e WHERE e.detail_idx=a.detail_idx) as poll_student_play_cnt
		FROM
			lms_edu_detail a
		LEFT OUTER JOIN
			lms_poll c
		ON
			a.po_idx=c.po_idx
		LEFT OUTER JOIN
			cms_member d
		ON
			a.teacher_idx=d.member_idx
		WHERE
		    a.detail_idx = #{detailIdx}
	</select>

	<!-- 만족도조사 질문목록 -->
	<select id="pollQsonList" parameterType="map" resultType="camelMap">
		SELECT
		    *
		FROM
		    lms_poll_qson
		WHERE
		    po_idx=#{poIdx}
		AND
		    delete_yn='n'
		ORDER BY
		    poq_order
	</select>

	<!-- 만족도조사 상세 질문 목록 -->
	<select id="pollQsonDetailList" parameterType="map" resultType="camelMap">
		SELECT
		    *
		FROM
		    lms_poll_qson_detail
		WHERE
		    poq_idx = #{poqIdx}
		AND
		    delete_yn = 'N'
	</select>

	<!-- 만족도조사 객관식 질문 상세 -->
	<select id="pollQsonDetailNumList" parameterType="map" resultType="camelMap">
		SELECT
		    a.poqd_idx,
		    a.poqd_text,
		    b.answer,
		    count(b.answer) as answer_count
		FROM
		    lms_poll_qson_detail a
		LEFT OUTER JOIN
			lms_poll_qson_review b
		ON
			a.poqd_idx = b.answer
		WHERE
		    a.poq_idx = #{poqIdx}
		AND
		    a.delete_yn = 'N'
		AND
		    b.detail_idx = #{detailIdx}
		GROUP BY
		    a.poqd_idx, a.poqd_text, b.answer
	</select>

	<!-- 만족도조사 주관식(서술형)질문 상세 -->
	<select id="pollQsonDetailDescList" parameterType="map" resultType="camelMap">
		SELECT
		    a.*, b.member_id, b.member_nm
		FROM
		    lms_poll_qson_review a
		LEFT OUTER JOIN
			cms_member b
		ON
			a.member_idx = b.member_idx
		LEFT OUTER JOIN
			lms_edu_play c
		ON
			a.play_idx = c.play_idx
		WHERE
		    a.poq_idx = #{poqIdx}
	  	AND
		    a.detail_idx = #{detailIdx}
		AND
		    a.text_yn = 'Y'
	</select>

	<select id="pollPlayCountData" parameterType="map" resultType="camelMap">
		SELECT
			SUM(sub.play_cnt) as all_cnt,
			SUM(sub.poll_play_cnt) as all_play_cnt
		FROM
			(
				SELECT
					a.po_subject,
					(SELECT COUNT(distinct c.member_idx) FROM lms_edu_play c WHERE c.delete_yn = 'n' AND c.detail_idx = b.detail_idx) AS play_cnt,
					(SELECT COUNT(distinct c.member_idx) FROM lms_poll_play c WHERE c.detail_idx = b.detail_idx) AS poll_play_cnt
				FROM
					lms_poll a
				LEFT OUTER JOIN
					lms_edu_detail b
				ON
					a.po_idx=b.po_idx
				WHERE
					a.po_idx=#{poIdx}
				AND
					a.delete_yn = 'N'
			) as sub
		GROUP BY sub.po_subject
	</select>

	<select id="pollPlayCountXYData" parameterType="map" resultType="camelMap">
		SELECT
			b.train_title,
			b.edu_numeral,
			(SELECT COUNT(distinct c.member_idx) FROM lms_edu_play c WHERE c.delete_yn = 'n' AND c.detail_idx = b.detail_idx) AS play_cnt,
			(SELECT COUNT(distinct c.member_idx) FROM lms_poll_play c WHERE c.detail_idx = b.detail_idx) AS poll_play_cnt
		FROM
			lms_poll a
		LEFT OUTER JOIN
			lms_edu_detail b
		ON
			a.po_idx=b.po_idx
		WHERE
			a.po_idx=#{poIdx}
	  	AND
			a.delete_yn = 'N'
		ORDER BY
		    play_cnt desc, poll_play_cnt desc
	</select>

	<select id="pollPlayDataTable" parameterType="map" resultType="camelMap">
		SELECT
		    a.*,
		    b.*,
		    c.member_nm as teacher_nm
		FROM
		    lms_poll a
		LEFT OUTER JOIN
			lms_edu_detail b
		ON
			a.po_idx=b.po_idx
		LEFT OUTER JOIN
			cms_member c
		ON
			b.teacher_idx=c.member_idx
		WHERE
		    a.po_idx=#{poIdx}
	</select>

	<!-- 테이블List조회 -->
	<sql id="selectEvalListWhere">
		<where>
			<choose>
				<when test="_parameter.containsKey(scDeleteYn)">
					<if test="!@kepco.util.StrUtil@isBlank(scDeleteYn)">
						AND a.delete_yn = #{scDeleteYn}
					</if>
				</when>
				<otherwise>
					AND a.delete_yn = 'n'
				</otherwise>
			</choose>
			-- 훈련명 검색조건
			<choose>
				<when test="@kepco.util.StrUtil@toStr(searchIdx) eq 'title'">
					AND b.train_title LIKE CONCAT('%', #{scWord}, '%')
				</when>
				<when test="@kepco.util.StrUtil@toStr(searchIdx) eq 'poll'">
					AND a.po_subject LIKE CONCAT('%', #{scWord}, '%')
				</when>
				<when test="@kepco.util.StrUtil@toStr(searchIdx) eq 'teacher'">
					AND c.member_nm LIKE CONCAT('%', #{scWord}, '%')
				</when>
			</choose>
		</where>
	</sql>

	<select id="selectEvalList" parameterType="map" resultType="camelMap">
		SELECT
			*,
			(SELECT COUNT(distinct d.member_idx) FROM lms_edu_play d WHERE d.delete_yn = 'n' AND d.detail_idx = b.detail_idx) AS play_cnt,
			(SELECT COUNT(distinct d.member_idx) FROM lms_evaluation_play d WHERE d.detail_idx = b.detail_idx) AS eval_play_cnt,
			c.member_nm as teacher_nm
		FROM
			lms_evaluation a
		LEFT OUTER JOIN
			lms_edu_detail b
		ON
			a.ev_idx=b.ev_idx
		LEFT OUTER JOIN
			cms_member c
		ON
			b.teacher_idx=c.member_idx
		<include refid="selectEvalListWhere"></include>
		ORDER BY eval_play_cnt desc, play_cnt desc
	</select>

	<!-- 사후평가 통계 상세 데이터 -->
	<select id="selectEvalViewDetailData" parameterType="map" resultType="camelMap">
		SELECT
			*,
			(SELECT COUNT(distinct e.member_idx) FROM lms_edu_play e WHERE e.delete_yn='n' AND e.detail_idx=a.detail_idx) as eval_student_all_cnt,
			(SELECT COUNT(distinct e.member_idx) FROM lms_evaluation_play e WHERE e.detail_idx=a.detail_idx) as eval_student_play_cnt
		FROM
			lms_edu_detail a
				LEFT OUTER JOIN
			lms_evaluation c
			ON
				a.ev_idx=c.ev_idx
				LEFT OUTER JOIN
			cms_member d
			ON
				a.teacher_idx=d.member_idx
		WHERE
			a.detail_idx = #{detailIdx}
	</select>

	<!-- 사후평가 문제목록 -->
	<select id="evalQsonList" parameterType="map" resultType="camelMap">
        SELECT
            *,
            (
				SELECT GROUP_CONCAT(evqd_text)
				FROM lms_evaluation_qson_detail b
				WHERE find_in_set(b.evqd_idx, a.evq_answer)
			  	AND a.evq_type='A'
			) as evq_text
        FROM lms_evaluation_qson a
        WHERE ev_idx = #{evIdx}
	  	AND delete_yn = 'n'
        ORDER BY evq_order
    </select>

	<!-- 사후평가 상세 질문 목록 -->
	<select id="evalQsonDetailList" parameterType="map" resultType="camelMap">
		SELECT *
		FROM lms_evaluation_qson_detail
		WHERE evq_idx = #{evqIdx}
	  	AND delete_yn = 'N'
	</select>

	<!-- 사후평가 객관식 답안 -->
	<select id="evalQsonDetailNumList" parameterType="map" resultType="camelMap">
		SELECT
			a.answer,
			(
				select group_concat(b.evqd_text)
				from lms_evaluation_qson_detail b
				where find_in_set(b.evqd_idx, a.answer)
			) as evqd_text,
			count(a.answer) as answer_count
		FROM
			lms_evaluation_qson_review a
		WHERE
			a.evq_idx = #{evqIdx}
		  AND
			a.delete_yn = 'N'
		  AND
			a.detail_idx = #{detailIdx}
		GROUP BY evqd_text;
	</select>

	<!-- 사후평가 주관식 답안 -->
	<select id="evalQsonDescList" parameterType="map" resultType="camelMap">
		SELECT
			a.*, b.member_id, b.member_nm
		FROM
			lms_evaluation_qson_review a
		LEFT OUTER JOIN
			cms_member b
		ON
			a.member_idx = b.member_idx
		WHERE
			a.evq_idx = #{evqIdx}
		  AND
			a.detail_idx = #{detailIdx}
		  AND
			a.text_yn = 'Y'
	</select>

	<!-- 사후평가 통계현황 목록 -->
	<select id="selectEvalOverviewList" parameterType="map" resultType="camelMap">
		SELECT t.ev_idx, t.ev_subject, t.edu_count, sum(t.play_cnt) as play_cnt, sum(t.eval_play_cnt) as eval_play_cnt
		FROM (
				 SELECT
					 a.ev_idx, a.ev_subject,
					 (SELECT COUNT(1) FROM lms_edu_detail b WHERE a.ev_idx=b.ev_idx GROUP BY b.ev_idx) as edu_count,
					 (SELECT COUNT(distinct c.member_idx) FROM lms_edu_play c WHERE c.delete_yn = 'n' AND c.detail_idx = b.detail_idx) as play_cnt,
					 (SELECT COUNT(distinct c.member_idx) FROM lms_evaluation_play c WHERE c.detail_idx = b.detail_idx) as eval_play_cnt
				 FROM
					 lms_evaluation a
				 LEFT OUTER JOIN
					 lms_edu_detail b
				 ON a.ev_idx=b.ev_idx
				 WHERE
				 	a.delete_yn='N'
			 ) as t
		WHERE t.ev_subject LIKE CONCAT('%', #{scWord}, '%')
		GROUP BY t.ev_idx
		ORDER BY eval_play_cnt desc, play_cnt desc, edu_count desc
	</select>

	<!-- 사후평가 통계현황 > 전체 과정별 참여, 미참여 인원 -->
	<select id="evalPlayCountData" parameterType="map" resultType="camelMap">
		SELECT
			SUM(sub.play_cnt) as all_cnt,
			SUM(sub.eval_play_cnt) as all_play_cnt
		FROM
			(
				SELECT
					a.ev_subject,
					(SELECT COUNT(distinct c.member_idx) FROM lms_edu_play c WHERE c.delete_yn = 'n' AND c.detail_idx = b.detail_idx) AS play_cnt,
					(SELECT COUNT(distinct c.member_idx) FROM lms_evaluation_play c WHERE c.detail_idx = b.detail_idx) AS eval_play_cnt
				FROM
					lms_evaluation a
						LEFT OUTER JOIN
					lms_edu_detail b
					ON
						a.ev_idx=b.ev_idx
				WHERE
					a.ev_idx=#{evIdx}
				  AND
					a.delete_yn = 'N'
			) as sub
		GROUP BY sub.ev_subject
	</select>

	<!-- 사후평가 통계현황 > 과정별 참여율 -->
	<select id="evalPlayCountXYData" parameterType="map" resultType="camelMap">
		SELECT
			b.train_title,
			b.edu_numeral,
			(SELECT COUNT(distinct c.member_idx) FROM lms_edu_play c WHERE c.delete_yn = 'n' AND c.detail_idx = b.detail_idx) AS play_cnt,
			(SELECT COUNT(distinct c.member_idx) FROM lms_evaluation_play c WHERE c.detail_idx = b.detail_idx) AS eval_play_cnt
		FROM
			lms_evaluation a
				LEFT OUTER JOIN
			lms_edu_detail b
			ON
				a.ev_idx=b.ev_idx
		WHERE
			a.ev_idx=#{evIdx}
		  AND
			a.delete_yn = 'N'
		ORDER BY
			play_cnt desc, eval_play_cnt desc
	</select>

	<!-- 사후평가 통계현황 사용중인 훈련 -->
	<select id="evalPlayDataTable" parameterType="map" resultType="camelMap">
		SELECT
			a.*,
			b.*,
			c.member_nm as teacher_nm
		FROM
			lms_evaluation a
				LEFT OUTER JOIN
			lms_edu_detail b
			ON
				a.ev_idx=b.ev_idx
				LEFT OUTER JOIN
			cms_member c
			ON
				b.teacher_idx=c.member_idx
		WHERE
			a.ev_idx=#{evIdx}
	</select>
</mapper>